/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gedalias.commandexecution.view;

import com.gedalias.commandexecution.observer.OnUpdateCommandSubject;
import com.gedalias.commandexecution.persist.entity.CommandEntity;
import com.gedalias.commandexecution.persist.repository.CommandRepository;
import com.gedalias.commandexecution.persist.repository.impl.CommandRepositoryImpl;
import com.gedalias.commandexecution.utils.NotificationUtil;
import java.awt.Dimension;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gedalias
 */
public class MainView extends javax.swing.JFrame {
    
    private JTable table;
    private boolean showPanel = false;
    private boolean showComponentOutputCommand = false;
    private final Dimension SHOW = new Dimension(255, 181);
    private final Dimension HIDDEN = new Dimension(0, 0);
    private Process executedProcess;
    private final String BREAK_LINE = "\n";
    
    private final String[] COLUMNS = new String[]{
        "Descrição", "Comando"
    };
    private final CommandRepository commandRepository = new CommandRepositoryImpl();

    /**
     * Creates new form MainView
     */
    public MainView() {     
        preLoadCommands();
        registerObserver();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newCommandBtn = new javax.swing.JButton();
        scrollPanel = new javax.swing.JScrollPane();
        executeCommandBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        commandDescriptionView = new javax.swing.JLabel();
        panelCreateCommand = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        descriptionTF = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        commandTF = new javax.swing.JTextField();
        saveCommandBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        scrollCommandShow = new javax.swing.JScrollPane();
        outputCommandTA = new javax.swing.JTextArea();
        stopProcessBtn = new javax.swing.JButton();
        inputParameterCommandTF = new javax.swing.JTextField();
        sendParameterCommandBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        newCommandBtn.setText("Novo");
        newCommandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCommandBtnActionPerformed(evt);
            }
        });

        buildTable();

        executeCommandBtn.setText("Executar");
        executeCommandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeCommandBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setText("Comando a ser executado:");

        commandDescriptionView.setText("Nenhum");

        panelCreateCommand.setMaximumSize(new java.awt.Dimension(255, 181));
        panelCreateCommand.setMinimumSize(new java.awt.Dimension(0, 0));
        panelCreateCommand.setPreferredSize(new java.awt.Dimension(0, 0));
        showOrHiddenCreateCommandView();

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setText("Criar novo Comando");

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel3.setText("Descrição:");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel4.setText("Comando:");

        saveCommandBtn.setText("Salvar");
        saveCommandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCommandBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCreateCommandLayout = new javax.swing.GroupLayout(panelCreateCommand);
        panelCreateCommand.setLayout(panelCreateCommandLayout);
        panelCreateCommandLayout.setHorizontalGroup(
            panelCreateCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreateCommandLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 52, Short.MAX_VALUE))
            .addGroup(panelCreateCommandLayout.createSequentialGroup()
                .addGroup(panelCreateCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionTF, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(commandTF)
                    .addGroup(panelCreateCommandLayout.createSequentialGroup()
                        .addGroup(panelCreateCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(saveCommandBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelCreateCommandLayout.setVerticalGroup(
            panelCreateCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCreateCommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveCommandBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputCommandTA.setColumns(20);
        outputCommandTA.setRows(5);
        scrollCommandShow.setViewportView(outputCommandTA);

        stopProcessBtn.setText("Parar");
        stopProcessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopProcessBtnActionPerformed(evt);
            }
        });

        sendParameterCommandBtn.setText("Enviar");
        sendParameterCommandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendParameterCommandBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newCommandBtn)
                            .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCreateCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(executeCommandBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(commandDescriptionView, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sendParameterCommandBtn)
                                    .addComponent(stopProcessBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrollCommandShow, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputParameterCommandTF, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newCommandBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelCreateCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executeCommandBtn)
                    .addComponent(jLabel1)
                    .addComponent(commandDescriptionView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stopProcessBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollCommandShow, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputParameterCommandTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendParameterCommandBtn))
                .addContainerGap())
        );

        showOrHiddenComponentOutputCommand();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeCommandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeCommandBtnActionPerformed
        if(!isSelectedTableRow()) {
            NotificationUtil.showMessage("É necessário selecionar uma linha");
            return;
        }
        
        final int rowPosition = table.getSelectedRow();        
        final String command = (String) table.getModel().getValueAt(rowPosition, 1);
        resetViewCommandExecution();
        executeCommand(command);
        
    }//GEN-LAST:event_executeCommandBtnActionPerformed

    private void saveCommandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCommandBtnActionPerformed
        final String description = descriptionTF.getText();
        final String command = commandTF.getText();
        commandRepository.save(new CommandEntity(null, description, command, LocalDateTime.now(), null));
        System.out.println("Novo commando salvo");
    }//GEN-LAST:event_saveCommandBtnActionPerformed

    private void newCommandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCommandBtnActionPerformed
        if(!showPanel) {
            showPanel = true;
            showOrHiddenCreateCommandView();
            redimentionFrame();
        }
        System.out.println(panelCreateCommand.getSize());
    }//GEN-LAST:event_newCommandBtnActionPerformed

    private void stopProcessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopProcessBtnActionPerformed
        executedProcess.destroy();
        outputCommandTA.append("Processo encerrado");
        
    }//GEN-LAST:event_stopProcessBtnActionPerformed

    private void sendParameterCommandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendParameterCommandBtnActionPerformed
        final String parameter = inputParameterCommandTF.getText();
        inputValueInCommandExecution(parameter);
    }//GEN-LAST:event_sendParameterCommandBtnActionPerformed
    
    private void buildTable() {
        DefaultTableModel model = new DefaultTableModel();
        table = new JTable(model);
        
        Arrays.stream(COLUMNS).forEach(model::addColumn);
        
        commandRepository.findAll().forEach(c -> model.addRow(new String[]{c.description(), c.command()}));
        
        table.getSelectionModel()
            .addListSelectionListener((ListSelectionEvent e) -> {
                final int rowSelectedPosition = table.getSelectedRow();
                final String commandDescription = (String) table.getValueAt(rowSelectedPosition, 0);
                commandDescriptionView.setText(commandDescription);
            });
        
        scrollPanel.setViewportView(table);
    }
    
    private boolean isSelectedTableRow() {
        return table.getSelectedRow()> -1;
    }
    
    private void showOrHiddenCreateCommandView() {
        panelCreateCommand.setVisible(showPanel);
        panelCreateCommand.setSize(showPanel?SHOW:HIDDEN);
    }
    
    private void redimentionFrame() {
        final Dimension actualD = getSize();
        actualD.width = actualD.width+panelCreateCommand.getWidth();
        setSize(actualD);
    }
    
    private void preLoadCommands() {
        commandRepository.save(new CommandEntity(1L, "Ping", "ping google.com.br", null, null));
        commandRepository.save(new CommandEntity(1L, "Telnet", "telnet localhost 8080", null, null));
        commandRepository.save(new CommandEntity(1L, "Bash", "bash /home/gedalias/Documentos/teste.sh", null, null));
    }
    
    private void registerObserver() {
        OnUpdateCommandSubject.add((c) ->
              ((DefaultTableModel) table.getModel())
                      .addRow(new String[]{c.description(), c.command()})
            );
    }
    
    private void executeCommand(String command) {     
        showComponentOutputCommand = true;
        showOrHiddenComponentOutputCommand();
        resizeFrameForCommand();
        new Thread(){
            @Override
            public void run() {
                try {
                    executedProcess = Runtime.getRuntime().exec(command);
                    showOutputCommand();
                } catch (IOException ex) {
                    outputCommandTA.setText(ex.getMessage());
                }
            }
        }.start();
        
    }
    
    private void showOutputCommand() {        
        int line;

        try(BufferedInputStream reader = new BufferedInputStream(executedProcess.getInputStream())) {
            while((line = reader.read()) != -1) {
                outputCommandTA.append(String.valueOf((char)line));
            }
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }
    
    private void resetViewCommandExecution() {
        executedProcess = null;
        outputCommandTA.setText("");
    }
    
    private void showOrHiddenComponentOutputCommand() {
        scrollCommandShow.setVisible(showComponentOutputCommand);
        stopProcessBtn.setVisible(showComponentOutputCommand);
        inputParameterCommandTF.setVisible(showComponentOutputCommand);
        sendParameterCommandBtn.setVisible(showComponentOutputCommand);
    }
    
    private void resizeFrameForCommand() {
        final Dimension actualD = getSize();
        actualD.height = actualD.height+150;
        setSize(actualD);
    }
    
    private void inputValueInCommandExecution(final String parameter) {
        if(executedProcess == null) {
            return;
        }
        
        try(final OutputStream output = executedProcess.getOutputStream()) {
            final String[] values = parameter.split(";");
            for(String value: values) {
                output.write(value.concat(BREAK_LINE).getBytes());
            }
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel commandDescriptionView;
    private javax.swing.JTextField commandTF;
    private javax.swing.JTextField descriptionTF;
    private javax.swing.JButton executeCommandBtn;
    private javax.swing.JTextField inputParameterCommandTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton newCommandBtn;
    private javax.swing.JTextArea outputCommandTA;
    private javax.swing.JPanel panelCreateCommand;
    private javax.swing.JButton saveCommandBtn;
    private javax.swing.JScrollPane scrollCommandShow;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JButton sendParameterCommandBtn;
    private javax.swing.JButton stopProcessBtn;
    // End of variables declaration//GEN-END:variables
}
